package RMIfile;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.Serializable;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.Scanner;;

@SuppressWarnings("serial")
public class RMIClient implements Serializable {

	@SuppressWarnings("resource")
	public static void main(String[] args) {
		
		String environment;
		String hostname;
		int portnumber;
		String clientpath;
		String serverpath;
		String download = "download";
		String shutdown= "shutdown";
		
		try{
						
			environment = System.getenv("SERVER_PORT");
			System.out.println(environment);
			
			hostname = "localhost";
			
			portnumber = 9999;
			System.out.println("seeking connection on:" + environment);
			
			Registry myreg = LocateRegistry.getRegistry(hostname, portnumber);				
			RmiInterface inter = (RmiInterface)myreg.lookup("remoteObject");
			int n;
			do {
				System.out.print("(1)Upload\n(2)Download\n(0)Exit\nPlease choose:");
				n = new Scanner(System.in).nextInt();
				if(n==1)
				{
					System.out.print("File Path:");
					clientpath= new Scanner(System.in).next();
					
					File clientpathfile = new File(clientpath);
					serverpath ="D:/ServerFile/"+clientpathfile.getName();
					byte [] mydata=new byte[(int) clientpathfile.length()];
					FileInputStream in=new FileInputStream(clientpathfile);	
						System.out.println("uploading to server...");		
					 in.read(mydata, 0, mydata.length);					 
					 inter.uploadFileToServer(mydata, serverpath, (int) clientpathfile.length());
					 in.close();
				}
				//to download a file
				if(download.equals(args[0]))
				{
					serverpath = args[1];
					clientpath= args[2];

					byte [] mydata = inter.downloadFileFromServer(serverpath);
					System.out.println("downloading...");
					File clientpathfile = new File(clientpath);
					FileOutputStream out=new FileOutputStream(clientpathfile);				
		    		out.write(mydata);
					out.flush();
			    	out.close();
				}
				if(shutdown.equals(args[0]))
				{
					System.exit(0);
					System.out.println("Client has shutdown. Close the console");
					break;
				}
				
			}while(true);
			
		}
		catch(Exception e)
		{
			e.printStackTrace();
			System.out.println("error with connection or command. Check your hostname or command");
		}				
		}
		
	}

